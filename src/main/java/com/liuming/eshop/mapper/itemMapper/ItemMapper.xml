<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.liuming.eshop.mapper.itemMapper.ItemMapper" >
  <resultMap id="map" type="com.liuming.eshop.entity.itemEntity.Item" >
    <id column="item_id" property="itemId" jdbcType="VARCHAR" />
    <result column="item_name" property="itemName" jdbcType="VARCHAR" />
    <result column="classify_id" property="classifyId" jdbcType="VARCHAR" />
    <result column="classify_name" property="classifyName" jdbcType="VARCHAR" />
    <result column="item_original_price" property="itemOriginalPrice" jdbcType="DOUBLE" />
    <result column="item_present_price" property="itemPresentPrice" jdbcType="DOUBLE" />
    <result column="item_url" property="itemUrl" jdbcType="VARCHAR" />
    <result column="stock_num" property="stockNum" jdbcType="INTEGER" />
    <result column="sales_num" property="salesNum" jdbcType="INTEGER" />
    <result column="member_discounted_status" property="memberDiscountedStatus" jdbcType="INTEGER" />
    <result column="member_discounted" property="memberDiscounted" jdbcType="DOUBLE" />
    <result column="not_member_discounted_status" property="notMemberDiscountedStatus" jdbcType="INTEGER" />
    <result column="not_member_discounted" property="notMemberDiscounted" jdbcType="DOUBLE" />
    <result column="item_status" property="itemStatus" jdbcType="INTEGER" />
    <result column="item_type" property="itemType" jdbcType="INTEGER" />
    <result column="item_created_date" property="itemCreatedDate" jdbcType="TIMESTAMP" />
    <result column="item_updated_date" property="itemUpdatedDate" jdbcType="TIMESTAMP" />
  </resultMap>
  <resultMap id="maps" type="com.liuming.eshop.entity.itemEntity.Item" extends="map" >
    <result column="item_desc" property="itemDesc" jdbcType="LONGVARCHAR" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    item_id, item_name, classify_id, classify_name, item_original_price, item_present_price, 
    item_url, stock_num, sales_num, member_discounted_status, member_discounted, not_member_discounted_status, 
    not_member_discounted, item_status, item_type, item_created_date, item_updated_date
  </sql>
  <sql id="Blob_Column_List" >
    item_desc
  </sql>
  <select id="selectByExampleWithBLOBs" resultMap="maps" parameterType="com.liuming.eshop.entity.itemEntity.ItemExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from item
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExample" resultMap="map" parameterType="com.liuming.eshop.entity.itemEntity.ItemExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from item
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="maps" parameterType="java.lang.String" >
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from item
    where item_id = #{itemId,jdbcType=VARCHAR}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.String" >
    delete from item
    where item_id = #{itemId,jdbcType=VARCHAR}
  </delete>
  <delete id="deleteByExample" parameterType="com.liuming.eshop.entity.itemEntity.ItemExample" >
    delete from item
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.liuming.eshop.entity.itemEntity.Item" >
    insert into item (item_id, item_name, classify_id, 
      classify_name, item_original_price, item_present_price, 
      item_url, stock_num, sales_num, 
      member_discounted_status, member_discounted, 
      not_member_discounted_status, not_member_discounted, 
      item_status, item_type, item_created_date, 
      item_updated_date, item_desc)
    values (#{itemId,jdbcType=VARCHAR}, #{itemName,jdbcType=VARCHAR}, #{classifyId,jdbcType=VARCHAR}, 
      #{classifyName,jdbcType=VARCHAR}, #{itemOriginalPrice,jdbcType=DOUBLE}, #{itemPresentPrice,jdbcType=DOUBLE}, 
      #{itemUrl,jdbcType=VARCHAR}, #{stockNum,jdbcType=INTEGER}, #{salesNum,jdbcType=INTEGER}, 
      #{memberDiscountedStatus,jdbcType=INTEGER}, #{memberDiscounted,jdbcType=DOUBLE}, 
      #{notMemberDiscountedStatus,jdbcType=INTEGER}, #{notMemberDiscounted,jdbcType=DOUBLE}, 
      #{itemStatus,jdbcType=INTEGER}, #{itemType,jdbcType=INTEGER}, #{itemCreatedDate,jdbcType=TIMESTAMP}, 
      #{itemUpdatedDate,jdbcType=TIMESTAMP}, #{itemDesc,jdbcType=LONGVARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.liuming.eshop.entity.itemEntity.Item" >
    insert into item
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="itemId != null" >
        item_id,
      </if>
      <if test="itemName != null" >
        item_name,
      </if>
      <if test="classifyId != null" >
        classify_id,
      </if>
      <if test="classifyName != null" >
        classify_name,
      </if>
      <if test="itemOriginalPrice != null" >
        item_original_price,
      </if>
      <if test="itemPresentPrice != null" >
        item_present_price,
      </if>
      <if test="itemUrl != null" >
        item_url,
      </if>
      <if test="stockNum != null" >
        stock_num,
      </if>
      <if test="salesNum != null" >
        sales_num,
      </if>
      <if test="memberDiscountedStatus != null" >
        member_discounted_status,
      </if>
      <if test="memberDiscounted != null" >
        member_discounted,
      </if>
      <if test="notMemberDiscountedStatus != null" >
        not_member_discounted_status,
      </if>
      <if test="notMemberDiscounted != null" >
        not_member_discounted,
      </if>
      <if test="itemStatus != null" >
        item_status,
      </if>
      <if test="itemType != null" >
        item_type,
      </if>
      <if test="itemCreatedDate != null" >
        item_created_date,
      </if>
      <if test="itemUpdatedDate != null" >
        item_updated_date,
      </if>
      <if test="itemDesc != null" >
        item_desc,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="itemId != null" >
        #{itemId,jdbcType=VARCHAR},
      </if>
      <if test="itemName != null" >
        #{itemName,jdbcType=VARCHAR},
      </if>
      <if test="classifyId != null" >
        #{classifyId,jdbcType=VARCHAR},
      </if>
      <if test="classifyName != null" >
        #{classifyName,jdbcType=VARCHAR},
      </if>
      <if test="itemOriginalPrice != null" >
        #{itemOriginalPrice,jdbcType=DOUBLE},
      </if>
      <if test="itemPresentPrice != null" >
        #{itemPresentPrice,jdbcType=DOUBLE},
      </if>
      <if test="itemUrl != null" >
        #{itemUrl,jdbcType=VARCHAR},
      </if>
      <if test="stockNum != null" >
        #{stockNum,jdbcType=INTEGER},
      </if>
      <if test="salesNum != null" >
        #{salesNum,jdbcType=INTEGER},
      </if>
      <if test="memberDiscountedStatus != null" >
        #{memberDiscountedStatus,jdbcType=INTEGER},
      </if>
      <if test="memberDiscounted != null" >
        #{memberDiscounted,jdbcType=DOUBLE},
      </if>
      <if test="notMemberDiscountedStatus != null" >
        #{notMemberDiscountedStatus,jdbcType=INTEGER},
      </if>
      <if test="notMemberDiscounted != null" >
        #{notMemberDiscounted,jdbcType=DOUBLE},
      </if>
      <if test="itemStatus != null" >
        #{itemStatus,jdbcType=INTEGER},
      </if>
      <if test="itemType != null" >
        #{itemType,jdbcType=INTEGER},
      </if>
      <if test="itemCreatedDate != null" >
        #{itemCreatedDate,jdbcType=TIMESTAMP},
      </if>
      <if test="itemUpdatedDate != null" >
        #{itemUpdatedDate,jdbcType=TIMESTAMP},
      </if>
      <if test="itemDesc != null" >
        #{itemDesc,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.liuming.eshop.entity.itemEntity.ItemExample" resultType="java.lang.Integer" >
    select count(*) from item
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update item
    <set >
      <if test="record.itemId != null" >
        item_id = #{record.itemId,jdbcType=VARCHAR},
      </if>
      <if test="record.itemName != null" >
        item_name = #{record.itemName,jdbcType=VARCHAR},
      </if>
      <if test="record.classifyId != null" >
        classify_id = #{record.classifyId,jdbcType=VARCHAR},
      </if>
      <if test="record.classifyName != null" >
        classify_name = #{record.classifyName,jdbcType=VARCHAR},
      </if>
      <if test="record.itemOriginalPrice != null" >
        item_original_price = #{record.itemOriginalPrice,jdbcType=DOUBLE},
      </if>
      <if test="record.itemPresentPrice != null" >
        item_present_price = #{record.itemPresentPrice,jdbcType=DOUBLE},
      </if>
      <if test="record.itemUrl != null" >
        item_url = #{record.itemUrl,jdbcType=VARCHAR},
      </if>
      <if test="record.stockNum != null" >
        stock_num = #{record.stockNum,jdbcType=INTEGER},
      </if>
      <if test="record.salesNum != null" >
        sales_num = #{record.salesNum,jdbcType=INTEGER},
      </if>
      <if test="record.memberDiscountedStatus != null" >
        member_discounted_status = #{record.memberDiscountedStatus,jdbcType=INTEGER},
      </if>
      <if test="record.memberDiscounted != null" >
        member_discounted = #{record.memberDiscounted,jdbcType=DOUBLE},
      </if>
      <if test="record.notMemberDiscountedStatus != null" >
        not_member_discounted_status = #{record.notMemberDiscountedStatus,jdbcType=INTEGER},
      </if>
      <if test="record.notMemberDiscounted != null" >
        not_member_discounted = #{record.notMemberDiscounted,jdbcType=DOUBLE},
      </if>
      <if test="record.itemStatus != null" >
        item_status = #{record.itemStatus,jdbcType=INTEGER},
      </if>
      <if test="record.itemType != null" >
        item_type = #{record.itemType,jdbcType=INTEGER},
      </if>
      <if test="record.itemCreatedDate != null" >
        item_created_date = #{record.itemCreatedDate,jdbcType=TIMESTAMP},
      </if>
      <if test="record.itemUpdatedDate != null" >
        item_updated_date = #{record.itemUpdatedDate,jdbcType=TIMESTAMP},
      </if>
      <if test="record.itemDesc != null" >
        item_desc = #{record.itemDesc,jdbcType=LONGVARCHAR},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExampleWithBLOBs" parameterType="map" >
    update item
    set item_id = #{record.itemId,jdbcType=VARCHAR},
      item_name = #{record.itemName,jdbcType=VARCHAR},
      classify_id = #{record.classifyId,jdbcType=VARCHAR},
      classify_name = #{record.classifyName,jdbcType=VARCHAR},
      item_original_price = #{record.itemOriginalPrice,jdbcType=DOUBLE},
      item_present_price = #{record.itemPresentPrice,jdbcType=DOUBLE},
      item_url = #{record.itemUrl,jdbcType=VARCHAR},
      stock_num = #{record.stockNum,jdbcType=INTEGER},
      sales_num = #{record.salesNum,jdbcType=INTEGER},
      member_discounted_status = #{record.memberDiscountedStatus,jdbcType=INTEGER},
      member_discounted = #{record.memberDiscounted,jdbcType=DOUBLE},
      not_member_discounted_status = #{record.notMemberDiscountedStatus,jdbcType=INTEGER},
      not_member_discounted = #{record.notMemberDiscounted,jdbcType=DOUBLE},
      item_status = #{record.itemStatus,jdbcType=INTEGER},
      item_type = #{record.itemType,jdbcType=INTEGER},
      item_created_date = #{record.itemCreatedDate,jdbcType=TIMESTAMP},
      item_updated_date = #{record.itemUpdatedDate,jdbcType=TIMESTAMP},
      item_desc = #{record.itemDesc,jdbcType=LONGVARCHAR}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update item
    set item_id = #{record.itemId,jdbcType=VARCHAR},
      item_name = #{record.itemName,jdbcType=VARCHAR},
      classify_id = #{record.classifyId,jdbcType=VARCHAR},
      classify_name = #{record.classifyName,jdbcType=VARCHAR},
      item_original_price = #{record.itemOriginalPrice,jdbcType=DOUBLE},
      item_present_price = #{record.itemPresentPrice,jdbcType=DOUBLE},
      item_url = #{record.itemUrl,jdbcType=VARCHAR},
      stock_num = #{record.stockNum,jdbcType=INTEGER},
      sales_num = #{record.salesNum,jdbcType=INTEGER},
      member_discounted_status = #{record.memberDiscountedStatus,jdbcType=INTEGER},
      member_discounted = #{record.memberDiscounted,jdbcType=DOUBLE},
      not_member_discounted_status = #{record.notMemberDiscountedStatus,jdbcType=INTEGER},
      not_member_discounted = #{record.notMemberDiscounted,jdbcType=DOUBLE},
      item_status = #{record.itemStatus,jdbcType=INTEGER},
      item_type = #{record.itemType,jdbcType=INTEGER},
      item_created_date = #{record.itemCreatedDate,jdbcType=TIMESTAMP},
      item_updated_date = #{record.itemUpdatedDate,jdbcType=TIMESTAMP}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.liuming.eshop.entity.itemEntity.Item" >
    update item
    <set >
      <if test="itemName != null" >
        item_name = #{itemName,jdbcType=VARCHAR},
      </if>
      <if test="classifyId != null" >
        classify_id = #{classifyId,jdbcType=VARCHAR},
      </if>
      <if test="classifyName != null" >
        classify_name = #{classifyName,jdbcType=VARCHAR},
      </if>
      <if test="itemOriginalPrice != null" >
        item_original_price = #{itemOriginalPrice,jdbcType=DOUBLE},
      </if>
      <if test="itemPresentPrice != null" >
        item_present_price = #{itemPresentPrice,jdbcType=DOUBLE},
      </if>
      <if test="itemUrl != null" >
        item_url = #{itemUrl,jdbcType=VARCHAR},
      </if>
      <if test="stockNum != null" >
        stock_num = #{stockNum,jdbcType=INTEGER},
      </if>
      <if test="salesNum != null" >
        sales_num = #{salesNum,jdbcType=INTEGER},
      </if>
      <if test="memberDiscountedStatus != null" >
        member_discounted_status = #{memberDiscountedStatus,jdbcType=INTEGER},
      </if>
      <if test="memberDiscounted != null" >
        member_discounted = #{memberDiscounted,jdbcType=DOUBLE},
      </if>
      <if test="notMemberDiscountedStatus != null" >
        not_member_discounted_status = #{notMemberDiscountedStatus,jdbcType=INTEGER},
      </if>
      <if test="notMemberDiscounted != null" >
        not_member_discounted = #{notMemberDiscounted,jdbcType=DOUBLE},
      </if>
      <if test="itemStatus != null" >
        item_status = #{itemStatus,jdbcType=INTEGER},
      </if>
      <if test="itemType != null" >
        item_type = #{itemType,jdbcType=INTEGER},
      </if>
      <if test="itemCreatedDate != null" >
        item_created_date = #{itemCreatedDate,jdbcType=TIMESTAMP},
      </if>
      <if test="itemUpdatedDate != null" >
        item_updated_date = #{itemUpdatedDate,jdbcType=TIMESTAMP},
      </if>
      <if test="itemDesc != null" >
        item_desc = #{itemDesc,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where item_id = #{itemId,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.liuming.eshop.entity.itemEntity.Item" >
    update item
    set item_name = #{itemName,jdbcType=VARCHAR},
      classify_id = #{classifyId,jdbcType=VARCHAR},
      classify_name = #{classifyName,jdbcType=VARCHAR},
      item_original_price = #{itemOriginalPrice,jdbcType=DOUBLE},
      item_present_price = #{itemPresentPrice,jdbcType=DOUBLE},
      item_url = #{itemUrl,jdbcType=VARCHAR},
      stock_num = #{stockNum,jdbcType=INTEGER},
      sales_num = #{salesNum,jdbcType=INTEGER},
      member_discounted_status = #{memberDiscountedStatus,jdbcType=INTEGER},
      member_discounted = #{memberDiscounted,jdbcType=DOUBLE},
      not_member_discounted_status = #{notMemberDiscountedStatus,jdbcType=INTEGER},
      not_member_discounted = #{notMemberDiscounted,jdbcType=DOUBLE},
      item_status = #{itemStatus,jdbcType=INTEGER},
      item_type = #{itemType,jdbcType=INTEGER},
      item_created_date = #{itemCreatedDate,jdbcType=TIMESTAMP},
      item_updated_date = #{itemUpdatedDate,jdbcType=TIMESTAMP},
      item_desc = #{itemDesc,jdbcType=LONGVARCHAR}
    where item_id = #{itemId,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.liuming.eshop.entity.itemEntity.Item" >
    update item
    set item_name = #{itemName,jdbcType=VARCHAR},
      classify_id = #{classifyId,jdbcType=VARCHAR},
      classify_name = #{classifyName,jdbcType=VARCHAR},
      item_original_price = #{itemOriginalPrice,jdbcType=DOUBLE},
      item_present_price = #{itemPresentPrice,jdbcType=DOUBLE},
      item_url = #{itemUrl,jdbcType=VARCHAR},
      stock_num = #{stockNum,jdbcType=INTEGER},
      sales_num = #{salesNum,jdbcType=INTEGER},
      member_discounted_status = #{memberDiscountedStatus,jdbcType=INTEGER},
      member_discounted = #{memberDiscounted,jdbcType=DOUBLE},
      not_member_discounted_status = #{notMemberDiscountedStatus,jdbcType=INTEGER},
      not_member_discounted = #{notMemberDiscounted,jdbcType=DOUBLE},
      item_status = #{itemStatus,jdbcType=INTEGER},
      item_type = #{itemType,jdbcType=INTEGER},
      item_created_date = #{itemCreatedDate,jdbcType=TIMESTAMP},
      item_updated_date = #{itemUpdatedDate,jdbcType=TIMESTAMP}
    where item_id = #{itemId,jdbcType=VARCHAR}
  </update>
</mapper>